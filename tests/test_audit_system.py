#!/usr/bin/env python
"""
Script de teste para demonstrar o sistema de auditoria do HooMoon
Execute: python test_audit_system.py
"""

import os
import sys
import django
from datetime import datetime, timedelta
from django.utils import timezone

# Setup Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')
django.setup()

from audit.utils import AuditLogger
from audit.models import AuditLog, SecurityEvent, AuditSettings, AuditEventType, AuditSeverity
from django.contrib.auth import get_user_model

User = get_user_model()

def test_audit_system():
    """Testa o sistema de auditoria completo"""
    
    print("üîç TESTANDO SISTEMA DE AUDITORIA HOOMOON")
    print("=" * 50)
    
    # 1. Testar cria√ß√£o de logs b√°sicos
    print("\n1. Criando logs de auditoria...")
    
    # Log de configura√ß√£o
    AuditLogger.log_event(
        event_type=AuditEventType.CONFIG_CHANGE,
        description="Teste: Configura√ß√£o do sistema alterada",
        severity=AuditSeverity.MEDIUM,
        module='test',
        details={'setting': 'test_mode', 'value': True}
    )
    
    # Log de transa√ß√£o financeira
    AuditLogger.log_event(
        event_type=AuditEventType.DEPOSIT,
        description="Teste: Dep√≥sito realizado",
        severity=AuditSeverity.HIGH,
        module='financial',
        details={'amount': 5000.00, 'currency': 'USD', 'method': 'PIX'}
    )
    
    # Log cr√≠tico
    AuditLogger.log_event(
        event_type=AuditEventType.SECURITY_EVENT,
        description="Teste: Evento cr√≠tico do sistema",
        severity=AuditSeverity.CRITICAL,
        module='security',
        details={'alert_type': 'high_value_transaction', 'amount': 25000}
    )
    
    print("‚úÖ Logs b√°sicos criados com sucesso!")
    
    # 2. Testar eventos de seguran√ßa
    print("\n2. Criando eventos de seguran√ßa...")
    
    # Tentativa de login falhada
    AuditLogger.log_security_event(
        event_type='FAILED_LOGIN',
        description="Teste: Tentativa de login falhada",
        ip_address='192.168.1.200',
        user_agent='Test Browser 1.0',
        additional_data={'username': 'test_user', 'attempts': 3}
    )
    
    # Atividade suspeita
    AuditLogger.log_security_event(
        event_type='SUSPICIOUS_ACTIVITY',
        description="Teste: M√∫ltiplas tentativas de acesso",
        ip_address='10.0.0.100',
        additional_data={'requests_per_minute': 50, 'endpoints': ['/api/users/', '/api/financial/']}
    )
    
    # Tentativa de SQL Injection
    AuditLogger.log_security_event(
        event_type='SQL_INJECTION',
        description="Teste: Tentativa de SQL Injection detectada",
        ip_address='203.0.113.42',
        user_agent='SQLMap/1.0',
        additional_data={'payload': "' OR 1=1 --", 'endpoint': '/api/users/'}
    )
    
    print("üîí Eventos de seguran√ßa criados com sucesso!")
    
    # 3. Verificar estat√≠sticas
    print("\n3. Verificando estat√≠sticas...")
    
    total_logs = AuditLog.objects.count()
    security_events = SecurityEvent.objects.count()
    critical_events = AuditLog.objects.filter(severity=AuditSeverity.CRITICAL).count()
    unresolved_security = SecurityEvent.objects.filter(resolved=False).count()
    
    print(f"üìä Total de logs: {total_logs}")
    print(f"üîí Eventos de seguran√ßa: {security_events}")
    print(f"üî¥ Eventos cr√≠ticos: {critical_events}")
    print(f"‚ö†Ô∏è Eventos n√£o resolvidos: {unresolved_security}")
    
    # 4. Testar configura√ß√µes
    print("\n4. Testando configura√ß√µes...")
    
    settings = AuditSettings.get_settings()
    print(f"‚öôÔ∏è Reten√ß√£o atual: {settings.retention_days} dias")
    print(f"üìß Alertas por email: {'‚úÖ' if settings.enable_email_alerts else '‚ùå'}")
    print(f"üîç Monitor de logins: {'‚úÖ' if settings.monitor_failed_logins else '‚ùå'}")
    print(f"üí∞ Monitor de transa√ß√µes: {'‚úÖ' if settings.monitor_high_value_transactions else '‚ùå'}")
    print(f"üíµ Limite alto valor: ${settings.high_value_threshold:,.2f}")
    
    # 5. Demonstrar filtros e consultas
    print("\n5. Demonstrando consultas avan√ßadas...")
    
    # Eventos por m√≥dulo
    modules = AuditLog.objects.values('module').distinct()
    print("üì¶ M√≥dulos com atividade:")
    for module in modules:
        if module['module']:
            count = AuditLog.objects.filter(module=module['module']).count()
            print(f"  - {module['module']}: {count} eventos")
    
    # Eventos por severidade
    print("\n‚ö†Ô∏è Eventos por severidade:")
    severities = AuditLog.objects.values('severity').distinct()
    severity_icons = {
        'LOW': 'üü¢',
        'MEDIUM': 'üü°', 
        'HIGH': 'üü†',
        'CRITICAL': 'üî¥'
    }
    for sev in severities:
        if sev['severity']:
            count = AuditLog.objects.filter(severity=sev['severity']).count()
            icon = severity_icons.get(sev['severity'], '‚ö™')
            print(f"  {icon} {sev['severity']}: {count} eventos")
    
    # IPs √∫nicos
    unique_ips = SecurityEvent.objects.values_list('ip_address', flat=True).distinct()
    print(f"\nüåê IPs √∫nicos detectados: {len(unique_ips)}")
    for ip in unique_ips:
        if ip:
            events = SecurityEvent.objects.filter(ip_address=ip).count()
            print(f"  - {ip}: {events} eventos")
    
    # 6. Testar detec√ß√£o de padr√µes
    print("\n6. Demonstrando detec√ß√£o de padr√µes...")
    
    # Simular m√∫ltiplas tentativas do mesmo IP
    test_ip = '192.168.1.200'
    failed_attempts = SecurityEvent.objects.filter(
        event_type='FAILED_LOGIN',
        ip_address=test_ip
    ).count()
    
    if failed_attempts >= 1:
        print(f"üö® Padr√£o suspeito detectado: {failed_attempts} tentativas de login do IP {test_ip}")
    
    # 7. Eventos recentes
    print("\n7. Eventos recentes (√∫ltimos 5):")
    recent_logs = AuditLog.objects.order_by('-timestamp')[:5]
    
    for log in recent_logs:
        timestamp = log.timestamp.strftime('%d/%m/%Y %H:%M:%S')
        severity_icon = severity_icons.get(log.severity, '‚ö™')
        print(f"  {severity_icon} {timestamp} - {log.event_type} - {log.description[:50]}...")
    
    # 8. Sum√°rio final
    print("\n" + "=" * 50)
    print("‚úÖ TESTE DO SISTEMA DE AUDITORIA CONCLU√çDO")
    print("\nüìà RESUMO FINAL:")
    print(f"  ‚Ä¢ {total_logs} logs de auditoria criados")
    print(f"  ‚Ä¢ {security_events} eventos de seguran√ßa registrados")
    print(f"  ‚Ä¢ {critical_events} eventos cr√≠ticos detectados")
    print(f"  ‚Ä¢ {unresolved_security} eventos aguardando resolu√ß√£o")
    print(f"  ‚Ä¢ {len(unique_ips)} IPs √∫nicos monitorados")
    
    print("\nüîß PR√ìXIMOS PASSOS:")
    print("  1. Configurar alertas por email")
    print("  2. Implementar dashboard de monitoramento")
    print("  3. Configurar limpeza autom√°tica de logs")
    print("  4. Integrar com sistema de tickets para eventos cr√≠ticos")
    print("  5. Implementar relat√≥rios de compliance")
    
    print("\nüìö COMANDOS √öTEIS:")
    print("  python manage.py audit_stats --detailed")
    print("  python manage.py cleanup_audit_logs --dry-run")
    print("  curl http://localhost:8000/api/audit/logs/")
    print("  curl http://localhost:8000/api/audit/security-events/")
    
    print("\nüéâ Sistema de auditoria implementado com sucesso!")
    return True

if __name__ == "__main__":
    try:
        success = test_audit_system()
        if success:
            sys.exit(0)
        else:
            sys.exit(1)
    except Exception as e:
        print(f"‚ùå Erro durante teste: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1) 