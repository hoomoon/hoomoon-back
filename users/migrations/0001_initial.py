# Generated by Django 5.2.1 on 2025-06-10 15:02

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('name', models.CharField(max_length=150, verbose_name='Nome Completo')),
                ('email', models.EmailField(blank=True, max_length=254, null=True, unique=True, verbose_name='Email')),
                ('phone', models.CharField(blank=True, max_length=20, null=True, verbose_name='Telefone')),
                ('country', models.CharField(blank=True, max_length=100, null=True, verbose_name='País')),
                ('cpf', models.CharField(blank=True, max_length=14, null=True, verbose_name='CPF')),
                ('referral_code', models.CharField(max_length=20, unique=True, verbose_name='Código de Indicação')),
                ('balance', models.DecimalField(decimal_places=2, default=0.0, max_digits=12, verbose_name='Saldo Disponível')),
                ('kyc_status', models.CharField(choices=[('PENDING', 'Pendente'), ('APPROVED', 'Aprovado'), ('REJECTED', 'Rejeitado'), ('REVIEW', 'Em Análise')], default='PENDING', max_length=20, verbose_name='Status KYC')),
                ('kyc_documents', models.JSONField(blank=True, default=dict, verbose_name='Documentos KYC')),
                ('notification_preferences', models.JSONField(blank=True, default=dict, help_text='Preferências de notificação (email, sms, push)', verbose_name='Preferências de Notificação')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('sponsor', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='referrals', to=settings.AUTH_USER_MODEL, verbose_name='Patrocinador')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Usuário',
                'verbose_name_plural': 'Usuários',
                'ordering': ['-created_at'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='UserActivity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('action', models.CharField(max_length=100, verbose_name='Ação')),
                ('description', models.TextField(blank=True, verbose_name='Descrição')),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True, verbose_name='Endereço IP')),
                ('user_agent', models.TextField(blank=True, verbose_name='User Agent')),
                ('extra_data', models.JSONField(blank=True, default=dict, verbose_name='Dados Extras')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='activities', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Atividade do Usuário',
                'verbose_name_plural': 'Atividades dos Usuários',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='UserNotification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('status', models.CharField(choices=[('ACTIVE', 'Active'), ('INACTIVE', 'Inactive'), ('PENDING', 'Pending'), ('CANCELLED', 'Cancelled')], default='ACTIVE', max_length=20, verbose_name='Status')),
                ('title', models.CharField(max_length=200, verbose_name='Título')),
                ('message', models.TextField(verbose_name='Mensagem')),
                ('notification_type', models.CharField(choices=[('DEPOSIT', 'Depósito'), ('INVESTMENT', 'Investimento'), ('EARNING', 'Ganho'), ('WITHDRAWAL', 'Saque'), ('REFERRAL', 'Indicação'), ('SYSTEM', 'Sistema'), ('SECURITY', 'Segurança'), ('PROMOTION', 'Promoção')], max_length=20, verbose_name='Tipo de Notificação')),
                ('read_at', models.DateTimeField(blank=True, null=True, verbose_name='Lida em')),
                ('action_url', models.URLField(blank=True, verbose_name='URL da Ação')),
                ('extra_data', models.JSONField(blank=True, default=dict, verbose_name='Dados Extras')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Notificação',
                'verbose_name_plural': 'Notificações',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('birth_date', models.DateField(blank=True, null=True, verbose_name='Data de Nascimento')),
                ('gender', models.CharField(blank=True, choices=[('M', 'Masculino'), ('F', 'Feminino'), ('O', 'Outro'), ('N', 'Prefiro não informar')], max_length=10, verbose_name='Gênero')),
                ('profession', models.CharField(blank=True, max_length=100, verbose_name='Profissão')),
                ('address', models.TextField(blank=True, verbose_name='Endereço')),
                ('city', models.CharField(blank=True, max_length=100, verbose_name='Cidade')),
                ('state', models.CharField(blank=True, max_length=100, verbose_name='Estado')),
                ('postal_code', models.CharField(blank=True, max_length=20, verbose_name='CEP')),
                ('bank_name', models.CharField(blank=True, max_length=100, verbose_name='Banco')),
                ('bank_account', models.CharField(blank=True, max_length=50, verbose_name='Conta Bancária')),
                ('pix_key', models.CharField(blank=True, max_length=255, verbose_name='Chave PIX')),
                ('avatar', models.URLField(blank=True, verbose_name='URL do Avatar')),
                ('risk_tolerance', models.CharField(choices=[('LOW', 'Baixo'), ('MODERATE', 'Moderado'), ('HIGH', 'Alto'), ('AGGRESSIVE', 'Agressivo')], default='MODERATE', max_length=20, verbose_name='Tolerância ao Risco')),
                ('investment_experience', models.CharField(choices=[('BEGINNER', 'Iniciante'), ('INTERMEDIATE', 'Intermediário'), ('ADVANCED', 'Avançado'), ('EXPERT', 'Especialista')], default='BEGINNER', max_length=20, verbose_name='Experiência em Investimentos')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Perfil do Usuário',
                'verbose_name_plural': 'Perfis dos Usuários',
            },
        ),
        migrations.AddConstraint(
            model_name='user',
            constraint=models.UniqueConstraint(condition=models.Q(models.Q(('cpf', ''), _negated=True), models.Q(('cpf__isnull', True), _negated=True)), fields=('cpf',), name='users_unique_non_empty_cpf'),
        ),
        migrations.AddIndex(
            model_name='useractivity',
            index=models.Index(fields=['user', '-created_at'], name='users_usera_user_id_250303_idx'),
        ),
        migrations.AddIndex(
            model_name='useractivity',
            index=models.Index(fields=['action'], name='users_usera_action_acb2ad_idx'),
        ),
        migrations.AddIndex(
            model_name='usernotification',
            index=models.Index(fields=['user', '-created_at'], name='users_usern_user_id_76912b_idx'),
        ),
        migrations.AddIndex(
            model_name='usernotification',
            index=models.Index(fields=['notification_type'], name='users_usern_notific_e796d4_idx'),
        ),
        migrations.AddIndex(
            model_name='usernotification',
            index=models.Index(fields=['read_at'], name='users_usern_read_at_94f5a7_idx'),
        ),
    ]
